name: Fetch and Deploy SBOMs to DependencyTrack

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:

jobs:
  read-repos:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Read repos.json and convert to matrix
        id: set-matrix
        run: |
          JSON=$(cat repos.json | jq -c)
          echo "matrix=$JSON" >> $GITHUB_OUTPUT

  fetch-versions:
    needs: read-repos
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: ${{ fromJson(needs.read-repos.outputs.matrix) }}
      fail-fast: false
    outputs:
      project_versions: ${{ steps.set-project-versions.outputs.project_versions }}
    steps:
      - name: Fetch Maven metadata
        id: get-versions
        run: |
          GROUP_PATH=$(echo "${{ matrix.repo.groupId }}" | tr '.' '/')
          METADATA_URL="https://repo1.maven.org/maven2/$GROUP_PATH/${{ matrix.repo.artifactId }}/maven-metadata.xml"
          VERSIONS=$(curl -s -f $METADATA_URL | xmllint --xpath '//metadata/versioning/versions/version/text()' - | tr ' ' '\n' | grep -v 'SNAPSHOT' || echo "")
          if [ -z "$VERSIONS" ]; then
            echo "No versions found for ${{ matrix.repo.artifactId }}"
            echo "versions=[]" >> $GITHUB_OUTPUT
          else
            echo "versions=[$(echo "$VERSIONS" | jq -R -s -c 'split("\n") | map(select(. != "")) | join(",")')]" >> $GITHUB_OUTPUT
          fi
        env:
          GROUP_ID: ${{ matrix.repo.groupId }}
          ARTIFACT_ID: ${{ matrix.repo.artifactId }}
        continue-on-error: true

      - name: Set project versions matrix
        id: set-project-versions
        run: |
          echo "project_versions={\"${{ matrix.repo.name }}\":${{ steps.get-versions.outputs.versions }}}" >> $GITHUB_OUTPUT

  download-and-upload-sboms:
    needs: [read-repos, fetch-versions]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: ${{ fromJson(needs.read-repos.outputs.matrix) }}
        version: ${{ fromJson(needs.fetch-versions.outputs.project_versions)[matrix.repo.name] }}
      fail-fast: false
      max-parallel: 10  # Limit concurrency to avoid rate limiting
    steps:
      - name: Create directory for SBOMs
        run: mkdir -p sboms

      - name: Download SBOM from Maven Central
        id: download-sbom
        run: |
          GROUP_PATH=$(echo "${{ matrix.repo.groupId }}" | tr '.' '/')
          SBOM_URL="https://repo1.maven.org/maven2/$GROUP_PATH/${{ matrix.repo.artifactId }}/${{ matrix.version }}/${{ matrix.repo.artifactId }}-${{ matrix.version }}-cyclonedx.json"
          SBOM_FILE="sboms/${{ matrix.repo.artifactId }}-${{ matrix.version }}-cyclonedx.json"
          
          # Attempt to download CycloneDX JSON SBOM with retry
          for i in {1..3}; do
            if curl -s -f -o "$SBOM_FILE" "$SBOM_URL"; then
              echo "SBOM (JSON) downloaded successfully for ${{ matrix.repo.artifactId }} version ${{ matrix.version }}"
              echo "sbom_downloaded=true" >> $GITHUB_OUTPUT
              echo "sbom_file=$SBOM_FILE" >> $GITHUB_OUTPUT
              break
            else
              echo "Attempt $i: SBOM (JSON) not found for ${{ matrix.repo.artifactId }} version ${{ matrix.version }}"
              sleep 1
            fi
          done
          
          # Try CycloneDX XML as fallback if JSON fails
          if [ "${{ steps.download-sbom.outputs.sbom_downloaded }}" != "true" ]; then
            SBOM_URL_XML="https://repo1.maven.org/maven2/$GROUP_PATH/${{ matrix.repo.artifactId }}/${{ matrix.version }}/${{ matrix.repo.artifactId }}-${{ matrix.version }}-cyclonedx.xml"
            SBOM_FILE_XML="sboms/${{ matrix.repo.artifactId }}-${{ matrix.version }}-cyclonedx.xml"
            for i in {1..3}; do
              if curl -s -f -o "$SBOM_FILE_XML" "$SBOM_URL_XML"; then
                echo "SBOM (XML) downloaded successfully for ${{ matrix.repo.artifactId }} version ${{ matrix.version }}"
                echo "sbom_downloaded=true" >> $GITHUB_OUTPUT
                echo "sbom_file=$SBOM_FILE_XML" >> $GITHUB_OUTPUT
                break
              else
                echo "Attempt $i: SBOM (XML) not found for ${{ matrix.repo.artifactId }} version ${{ matrix.version }}"
                sleep 1
              fi
            done
          fi
          
          # Set sbom_downloaded to false if both attempts fail
          if [ "${{ steps.download-sbom.outputs.sbom_downloaded }}" != "true" ]; then
            echo "sbom_downloaded=false" >> $GITHUB_OUTPUT
          fi
        env:
          GROUP_ID: ${{ matrix.repo.groupId }}
          ARTIFACT_ID: ${{ matrix.repo.artifactId }}
        continue-on-error: true

      - name: Upload SBOM to DependencyTrack
        if: steps.download-sbom.outputs.sbom_downloaded == 'true'
        uses: DependencyTrack/gh-upload-sbom@v3
        with:
          serverHostname: 'api.dependencytrack.open-elements.cloud'
          apiKey: ${{ secrets.DEPENDENCYTRACK_API_KEY }}
          projectName: ${{ matrix.repo.projectName }}
          projectVersion: ${{ matrix.version }}
          bomFilename: ${{ steps.download-sbom.outputs.sbom_file }}
          autoCreate: true
