name: Fetch and Deploy SBOMs to DependencyTrack

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 1,15 * *'
  workflow_dispatch:

jobs:
  read-repos:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-matrix.outputs.projects }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read repos.json and split to project list
        id: set-matrix
        run: |
          JSON=$(cat repos.json | jq -c '[.[] | {name, groupId, artifactId}]')
          echo "projects=$JSON" >> $GITHUB_OUTPUT

  fetch-and-upload-sboms:
    needs: read-repos
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.read-repos.outputs.projects) }}
      fail-fast: false
      max-parallel: 10
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq gnupg coreutils

      - name: Prepare SBOM directory
        run: mkdir -p sboms

      - name: Fetch versions and download/upload SBOMs
        env:
          DEPENDENCYTRACK_API_KEY: ${{ secrets.DEPENDENCYTRACK_API_KEY }}
          DEPENDENCYTRACK_API_URL: https://api.dependencytrack.open-elements.cloud/api/v1/bom
        run: |
          name="${{ matrix.project.name }}"
          groupId="${{ matrix.project.groupId }}"
          artifactId="${{ matrix.project.artifactId }}"

          groupPath=$(echo "$groupId" | tr '.' '/')
          url="https://repo1.maven.org/maven2/$groupPath/$artifactId/maven-metadata.xml"

          echo "Fetching versions for $artifactId"
          versions=$(curl -s -f "$url" | grep '<version>' | sed -E 's/.*<version>([^<]+)<\/version>.*/\1/' | grep -v SNAPSHOT || echo "")

          if [ -z "$versions" ]; then
            echo "No versions found for $artifactId"
            exit 0
          fi

          for version in $versions; do
            echo "Processing $artifactId:$version"

            base_url="https://repo1.maven.org/maven2/$groupPath/$artifactId/$version"
            JSON_SBOM_FILE="sboms/$artifactId-$version-cyclonedx.json"
            SIG_FILE="$JSON_SBOM_FILE.asc"
            SHA256_FILE="$JSON_SBOM_FILE.sha256"

            JSON_SBOM_URL="$base_url/$artifactId-$version-cyclonedx.json"
            SIG_URL="$base_url/$artifactId-$version-cyclonedx.json.asc"
            SHA256_URL="$base_url/$artifactId-$version-cyclonedx.json.sha256"

            # Download SBOM
            if ! curl -s -f -o "$JSON_SBOM_FILE" "$JSON_SBOM_URL"; then
              echo "‚ö†Ô∏è SBOM not found for $artifactId:$version"
              continue
            fi
            echo "‚úÖ Downloaded SBOM for $artifactId:$version"

            # Download Signature
            if ! curl -s -f -o "$SIG_FILE" "$SIG_URL"; then
              echo "‚ö†Ô∏è Signature not found for $artifactId:$version"
              continue
            fi
            echo "‚úÖ Downloaded signature"

            # Download SHA256
            if ! curl -s -f -o "$SHA256_FILE" "$SHA256_URL"; then
              echo "‚ö†Ô∏è SHA256 not found for $artifactId:$version"
              continue
            fi
            echo "‚úÖ Downloaded SHA256 file"

            # Verify Signature
            KEY_ID=$(gpg --dry-run --verify "$SIG_FILE" "$JSON_SBOM_FILE" 2>&1 | grep 'using [A-Z]* key' | awk '{print $NF}' | tail -n1)

            if [ -z "$KEY_ID" ]; then
              echo "‚ùå Could not determine key ID from signature"
              continue
            fi

            echo "Importing public key $KEY_ID..."
            if ! gpg --list-keys "$KEY_ID" > /dev/null 2>&1; then
              gpg --keyserver keyserver.ubuntu.com --recv-keys "$KEY_ID" || {
                echo "‚ùå Failed to import public key $KEY_ID"
                continue
              }
            else
              echo "Public key $KEY_ID already present"
            fi

            if ! gpg --verify "$SIG_FILE" "$JSON_SBOM_FILE"; then
              echo "‚ùå Signature verification failed for $artifactId:$version"
              continue
            fi
            echo "‚úÖ Signature verification passed"

            # Verify SHA256
            EXPECTED_HASH=$(cat "$SHA256_FILE" | awk '{print $1}')
            ACTUAL_HASH=$(sha256sum "$JSON_SBOM_FILE" | awk '{print $1}')

            if [ "$EXPECTED_HASH" != "$ACTUAL_HASH" ]; then
              echo "‚ùå SHA256 hash mismatch for $artifactId:$version"
              echo "Expected: $EXPECTED_HASH"
              echo "Actual  : $ACTUAL_HASH"
              continue
            fi
            echo "‚úÖ SHA256 hash verified"

            # Upload SBOM
            echo "üì§ Uploading SBOM to Dependency-Track..."
            curl -X POST \
              -H 'Content-Type: multipart/form-data' \
              -H 'X-API-Key: ${{ secrets.DEPENDENCYTRACK_API_KEY }}' \
              -F 'autoCreate=true' \
              -F 'projectName=${{ matrix.project.name }}' \
              -F "projectVersion=$version" \
              -F "bom=@$JSON_SBOM_FILE" \
              $DEPENDENCYTRACK_API_URL

            echo "‚úÖ Finished uploading SBOM for $artifactId:$version"
          done
